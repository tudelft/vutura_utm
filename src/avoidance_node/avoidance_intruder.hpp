#ifndef AVOIDANCE_INTRUDER_HPP
#define AVOIDANCE_INTRUDER_HPP

#include <string>

class Avoidance_intruder
{
public:
        Avoidance_intruder(std::string ac_id, double latd,
                                double lond, double alt, double hdgd,
                                double gs, double recorded_time);

        std::string getAircraftId();
        double getVn();
        double getVe();
        double getRecordedTime();
        double getReceivedTime();
        double getPnRel();
        double getPeRel();
        double getVnRel();
        double getVeRel();
        double getV2Rel();
        double getVRel();
        double getD2Rel();
        double getDRel();
        double getBearingRel();
        bool getInConf();
        bool getAvoiding();

        void setData(double latd, double lond,
                        double alt, double hdgd,
                        double gs, double recorded_time);

        void updateRelVar(double lat_own, double lon_own, double alt_own, double vn_own, double ve_own, double r);

        // avoidance functions
        void setConflictPar(bool inconf, double t_cpa, double d_cpa, double d_in, double d_los, double t_los);
        void setAvoiding(bool avoiding);
private:
        // returns timestamp in seconds
        double getTimeStamp();

        // parameters from data package
        std::string _aircaft_id;
        double _latd;
        double _lat;
        double _lond;
        double _lon;
        double _alt;
        double _headingd;
        double _heading;
        double _groundspeed;
        double _vn;
        double _ve;
        double _recorded_time;

        // data to be generated by avoidance computer
        double _received_time;

        struct rel_var {
                double pn; // north
                double pe; // east
                double pd; // up
                double vn;
                double ve;
                double v2;
                double v;
                double dist2;
                double dist;
                double bearing;
        } _rel_var;

        struct conflict {
                bool inconf {false};
                bool avoiding {false};
                double t_cpa;
                double d_cpa;
                double d_in;
                double d_los;
                double t_los;
        } _conflict;
};

#endif // AVOIDANCE_INTRUDER_HPP
